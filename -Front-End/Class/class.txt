What is the difference between classical inheritance and prototypal inheritance?

classical inheritance:
* instance inherited from classes
* hierarchical
* instaniated through constructor
* Classes: create tight coupling or hierarchies/taxonomies.
* In class inheritance, instances inherit from a blueprint (the class), and create sub-class relationships. In other words, you can’t use the class like you would use an instance. You can’t invoke instance methods on a class definition itself. You must first create an instance and then invoke methods on that instance.



prototypal inheritance:
* allow selective inheritance
* instance inherited directly from other objects
* Prototypes: mentions of concatenative inheritance, prototype delegation, functional inheritance, object composition.
* In prototypal inheritance, instances inherit from other instances. Using delegate prototypes (setting the prototype of one instance to refer to an examplar object), it’s literally Objects Linking to Other Objects, or OLOO, as Kyle Simpson calls it. Using concatenative inheritance, you just copy properties from an exemplar object to a new instance.

In JavaScript, prototypal inheritance is simpler & more flexible than class inheritance.

Don't use class in javascript
https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3
https://medium.com/javascript-scene/common-misconceptions-about-inheritance-in-javascript-d5d9bab29b0a